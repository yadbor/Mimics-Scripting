sphere1.center = [-29.9621, -36.1569, 76.0900]

spline_pts = [[-22.31, -46.94, 94.00],
[-32.22, -46.54, 92.10],
[-41.65, -42.97, 87.38],
[-46.08, -38.57, 83.18],
[-45.93, -35.38, 75.76],
[-46.55, -35.92, 68.80],
[-44.12, -40.42, 61.95],
[-36.31, -44.23, 58.72],
[-26.31, -44.84, 60.14],
[-16.61, -46.71, 64.92],
[-11.09, -48.23, 70.07],
[-8.86, -46.85, 76.10],
[-10.93, -44.75, 82.40],
[-13.85, -45.99, 88.07],
[-17.94, -46.54, 92.42,]
]








Python 3.7.9 (tags/v3.7.9:13c94747c7, Aug 17 2020, 18:58:18) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> sign(-5)
Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    sign(-5)
NameError: name 'sign' is not defined
>>> sgn(-5)
Traceback (most recent call last):
  File "<pyshell#1>", line 1, in <module>
    sgn(-5)
NameError: name 'sgn' is not defined
>>> X = -5
>>> X < 0
True
>>> ["L", "R"]
['L', 'R']
>>> ('L', 'R')[X<0]
'R'
>>> ('L', 'R')[X==0]
'L'
>>> ==0
SyntaxError: invalid syntax
>>> X==0
False
>>> if X < 0:
	side = 'Left'
	elif X > 0:
		
SyntaxError: invalid syntax
>>> if X < 0:
	side = 'Left'
    elif X > 0:
	    
SyntaxError: unindent does not match any outer indentation level
>>> if X < 0:
	side = 'Left'
elif X > 0:
	side = 'Right'
else:
	print('side is ambiguous')

	
>>> if X < 0:
	side = 'Left'
elif X > 0:
	side = 'Right'
else:
	print('side is ambiguous')

	
>>> side
'Left'
>>> X = 5
>>> if X < 0:
	side = 'Left'
elif X > 0:
	side = 'Right'
else:
	print('side is ambiguous')

	
>>> side
'Right'
>>> X = 0
>>> if X < 0:
	side = 'Left'
elif X > 0:
	side = 'Right'
else:
	print('side is ambiguous')

	
side is ambiguous
>>> side
'Right'
>>> if X < 0:
	side = 'Right'

	
>>> if X < 0:
	side = 'Right'
	elif X > 0:
		
SyntaxError: invalid syntax
>>>  left =(X < 0)
 
SyntaxError: unexpected indent
>>> def side(X):
	if X < 0:
		return 'right'
	elif X > 0:
		return 'left'
	else:
		return 'ambiguous'

	
>>> side(X)
'ambiguous'
>>> side(-5)
'right'
>>> side(10)
'left'
>>> import pydicom
Traceback (most recent call last):
  File "<pyshell#48>", line 1, in <module>
    import pydicom
ModuleNotFoundError: No module named 'pydicom'
>>> pts = [[-22.31, -46.94, 94.00],
[-32.22, -46.54, 92.10],
[-41.65, -42.97, 87.38],
[-46.08, -38.57, 83.18],
[-45.93, -35.38, 75.76],
[-46.55, -35.92, 68.80],
[-44.12, -40.42, 61.95],
[-36.31, -44.23, 58.72],
[-26.31, -44.84, 60.14],
[-16.61, -46.71, 64.92],
[-11.09, -48.23, 70.07],
[-8.86, , -46.85, 76.10],
[-10.93, -44.75, 82.40],
[-13.85, -45.99, 88.07],
[-17.94, -46.54, 92.42,]
]
SyntaxError: invalid syntax
>>> pts = [[-22.31, -46.94, 94.00],
[-32.22, -46.54, 92.10],
[-41.65, -42.97, 87.38],
[-46.08, -38.57, 83.18],
[-45.93, -35.38, 75.76],
[-46.55, -35.92, 68.80],
[-44.12, -40.42, 61.95],
[-36.31, -44.23, 58.72],
[-26.31, -44.84, 60.14],
[-16.61, -46.71, 64.92],
[-11.09, -48.23, 70.07],
[-8.86, -46.85, 76.10],
[-10.93, -44.75, 82.40],
[-13.85, -45.99, 88.07],
[-17.94, -46.54, 92.42,]
]
>>> pts
[[-22.31, -46.94, 94.0], [-32.22, -46.54, 92.1], [-41.65, -42.97, 87.38], [-46.08, -38.57, 83.18], [-45.93, -35.38, 75.76], [-46.55, -35.92, 68.8], [-44.12, -40.42, 61.95], [-36.31, -44.23, 58.72], [-26.31, -44.84, 60.14], [-16.61, -46.71, 64.92], [-11.09, -48.23, 70.07], [-8.86, -46.85, 76.1], [-10.93, -44.75, 82.4], [-13.85, -45.99, 88.07], [-17.94, -46.54, 92.42]]
>>> (max_x, max_y, max_z) = [max(idx) for idx in list(zip(* pts))]
>>> min_x, min_y, min_z) = [min(idx) for idx in list(zip(* pts))]
SyntaxError: invalid syntax
>>> (min_x, min_y, min_z) = [min(idx) for idx in list(zip(* pts))]
>>> max_z
94.0
>>> min_z
58.72
>>> delta_z = round(max_z - min_z, 0)
>>> delta_z
35.0
>>> import const
Traceback (most recent call last):
  File "<pyshell#59>", line 1, in <module>
    import const
ModuleNotFoundError: No module named 'const'
>>> spacing_z= delta_z/10
>>> spacing_z
3.5
>>> z_planes = {}
>>> sphere1.center = [-29.9621, -36.1569, 76.0900]
Traceback (most recent call last):
  File "<pyshell#63>", line 1, in <module>
    sphere1.center = [-29.9621, -36.1569, 76.0900]
NameError: name 'sphere1' is not defined
>>> class Ball:
	def __init__(self, radius, c_x, c_y, c_z):
		self.radius = radius
		self.center = [c_x, c_y, c_z]

		
>>> sphere1 = Ball(11.776, -29.9621, -36.1569, 76.0900)
>>> sphere1.center
[-29.9621, -36.1569, 76.09]
>>> for n in range(9):
	orig = [sphere1.center[0], sphere1.center[1], min_z + (n+1)*spacing_z]
	z_planes[n] = {'center' = orig, 'normal' = [0,0,1]}
	
SyntaxError: invalid syntax
>>> for n in range(9):
	orig = [sphere1.center[0], sphere1.center[1], min_z + (n+1)*spacing_z]
	z_planes[n] = {'center': orig, 'normal': [0,0,1]}

	
>>> z_planes
{0: {'center': [-29.9621, -36.1569, 62.22], 'normal': [0, 0, 1]}, 1: {'center': [-29.9621, -36.1569, 65.72], 'normal': [0, 0, 1]}, 2: {'center': [-29.9621, -36.1569, 69.22], 'normal': [0, 0, 1]}, 3: {'center': [-29.9621, -36.1569, 72.72], 'normal': [0, 0, 1]}, 4: {'center': [-29.9621, -36.1569, 76.22], 'normal': [0, 0, 1]}, 5: {'center': [-29.9621, -36.1569, 79.72], 'normal': [0, 0, 1]}, 6: {'center': [-29.9621, -36.1569, 83.22], 'normal': [0, 0, 1]}, 7: {'center': [-29.9621, -36.1569, 86.72], 'normal': [0, 0, 1]}, 8: {'center': [-29.9621, -36.1569, 90.22], 'normal': [0, 0, 1]}}
>>> len(z_planes)
9
>>> [a[2] for a in z_planes]
Traceback (most recent call last):
  File "<pyshell#78>", line 1, in <module>
    [a[2] for a in z_planes]
  File "<pyshell#78>", line 1, in <listcomp>
    [a[2] for a in z_planes]
TypeError: 'int' object is not subscriptable
>>> [pt[2] for idx, pt in z_planes]
Traceback (most recent call last):
  File "<pyshell#79>", line 1, in <module>
    [pt[2] for idx, pt in z_planes]
  File "<pyshell#79>", line 1, in <listcomp>
    [pt[2] for idx, pt in z_planes]
TypeError: cannot unpack non-iterable int object
>>> [pt[2] for idx, pt in * z_planes]
SyntaxError: invalid syntax
>>> [(idx, pt) for idx, pt in z_planes]
Traceback (most recent call last):
  File "<pyshell#81>", line 1, in <module>
    [(idx, pt) for idx, pt in z_planes]
  File "<pyshell#81>", line 1, in <listcomp>
    [(idx, pt) for idx, pt in z_planes]
TypeError: cannot unpack non-iterable int object
>>> [pt for pt in z_planes]
[0, 1, 2, 3, 4, 5, 6, 7, 8]
>>> enumerate(z_plnaes)
Traceback (most recent call last):
  File "<pyshell#83>", line 1, in <module>
    enumerate(z_plnaes)
NameError: name 'z_plnaes' is not defined
>>> enumerate(z_planes)
<enumerate object at 0x00000000038CCCC8>
>>> list(enumerate(z_planes))
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8)]
>>> z_planes[0]
{'center': [-29.9621, -36.1569, 62.22], 'normal': [0, 0, 1]}
>>> [(pt.center[2] for idx, pt in z_planes]
 
SyntaxError: invalid syntax
>>> [pt.center[2] for idx, pt in z_planes]
Traceback (most recent call last):
  File "<pyshell#88>", line 1, in <module>
    [pt.center[2] for idx, pt in z_planes]
  File "<pyshell#88>", line 1, in <listcomp>
    [pt.center[2] for idx, pt in z_planes]
TypeError: cannot unpack non-iterable int object
>>> [pt.center[2] for pt in z_planes]
Traceback (most recent call last):
  File "<pyshell#89>", line 1, in <module>
    [pt.center[2] for pt in z_planes]
  File "<pyshell#89>", line 1, in <listcomp>
    [pt.center[2] for pt in z_planes]
AttributeError: 'int' object has no attribute 'center'
>>> zplanes[0]
Traceback (most recent call last):
  File "<pyshell#90>", line 1, in <module>
    zplanes[0]
NameError: name 'zplanes' is not defined
>>> z_planes[0]
{'center': [-29.9621, -36.1569, 62.22], 'normal': [0, 0, 1]}
>>> z_planes[0].center
Traceback (most recent call last):
  File "<pyshell#92>", line 1, in <module>
    z_planes[0].center
AttributeError: 'dict' object has no attribute 'center'
>>> z_planes[0]['center']
[-29.9621, -36.1569, 62.22]
>>> z_planes[0]['center'][2]
62.22
>>> [a['center'][2] for a in z_planes]
Traceback (most recent call last):
  File "<pyshell#95>", line 1, in <module>
    [a['center'][2] for a in z_planes]
  File "<pyshell#95>", line 1, in <listcomp>
    [a['center'][2] for a in z_planes]
TypeError: 'int' object is not subscriptable
>>> z_planes[0]
{'center': [-29.9621, -36.1569, 62.22], 'normal': [0, 0, 1]}
>>> z_planes
{0: {'center': [-29.9621, -36.1569, 62.22], 'normal': [0, 0, 1]}, 1: {'center': [-29.9621, -36.1569, 65.72], 'normal': [0, 0, 1]}, 2: {'center': [-29.9621, -36.1569, 69.22], 'normal': [0, 0, 1]}, 3: {'center': [-29.9621, -36.1569, 72.72], 'normal': [0, 0, 1]}, 4: {'center': [-29.9621, -36.1569, 76.22], 'normal': [0, 0, 1]}, 5: {'center': [-29.9621, -36.1569, 79.72], 'normal': [0, 0, 1]}, 6: {'center': [-29.9621, -36.1569, 83.22], 'normal': [0, 0, 1]}, 7: {'center': [-29.9621, -36.1569, 86.72], 'normal': [0, 0, 1]}, 8: {'center': [-29.9621, -36.1569, 90.22], 'normal': [0, 0, 1]}}
>>> [a for a in z_planes]
[0, 1, 2, 3, 4, 5, 6, 7, 8]
>>> [a for a in * z_planes]
SyntaxError: invalid syntax
>>> [a for a in (* z_planes)]
SyntaxError: can't use starred expression here
>>> [a for a in list(* z_planes)]
Traceback (most recent call last):
  File "<pyshell#101>", line 1, in <module>
    [a for a in list(* z_planes)]
TypeError: list expected at most 1 arguments, got 9
>>> [a for a in list(z_planes)]
[0, 1, 2, 3, 4, 5, 6, 7, 8]
>>> list(z_planes)
[0, 1, 2, 3, 4, 5, 6, 7, 8]
>>> *z_planes
SyntaxError: can't use starred expression here
>>> [a for a in list(zip(* z_planes))]
Traceback (most recent call last):
  File "<pyshell#105>", line 1, in <module>
    [a for a in list(zip(* z_planes))]
TypeError: zip argument #1 must support iteration
>>> foo
Traceback (most recent call last):
  File "<pyshell#106>", line 1, in <module>
    foo
NameError: name 'foo' is not defined
>>> foo = z_planes[0]
>>> dir(foo)
['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
>>> foo.items
<built-in method items of dict object at 0x00000000038BB368>
>>> foo.items()
dict_items([('center', [-29.9621, -36.1569, 62.22]), ('normal', [0, 0, 1])])
>>> foo.items('center')
Traceback (most recent call last):
  File "<pyshell#111>", line 1, in <module>
    foo.items('center')
TypeError: items() takes no arguments (1 given)
>>> foo.items()['center']
Traceback (most recent call last):
  File "<pyshell#112>", line 1, in <module>
    foo.items()['center']
TypeError: 'dict_items' object is not subscriptable
>>> foo.get('center')
[-29.9621, -36.1569, 62.22]
>>> [a.get('center') for a in z_planes]
Traceback (most recent call last):
  File "<pyshell#114>", line 1, in <module>
    [a.get('center') for a in z_planes]
  File "<pyshell#114>", line 1, in <listcomp>
    [a.get('center') for a in z_planes]
AttributeError: 'int' object has no attribute 'get'
>>> enumerate(z_planes)
<enumerate object at 0x00000000038CCD18>
>>> zplanes.get('0')
Traceback (most recent call last):
  File "<pyshell#116>", line 1, in <module>
    zplanes.get('0')
NameError: name 'zplanes' is not defined
>>> z_planes.get('0')
>>> dir(z_planes)
['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
>>> z_planes.keys()
dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8])
>>> z_planes[0]
{'center': [-29.9621, -36.1569, 62.22], 'normal': [0, 0, 1]}
>>> z_planes
{0: {'center': [-29.9621, -36.1569, 62.22], 'normal': [0, 0, 1]}, 1: {'center': [-29.9621, -36.1569, 65.72], 'normal': [0, 0, 1]}, 2: {'center': [-29.9621, -36.1569, 69.22], 'normal': [0, 0, 1]}, 3: {'center': [-29.9621, -36.1569, 72.72], 'normal': [0, 0, 1]}, 4: {'center': [-29.9621, -36.1569, 76.22], 'normal': [0, 0, 1]}, 5: {'center': [-29.9621, -36.1569, 79.72], 'normal': [0, 0, 1]}, 6: {'center': [-29.9621, -36.1569, 83.22], 'normal': [0, 0, 1]}, 7: {'center': [-29.9621, -36.1569, 86.72], 'normal': [0, 0, 1]}, 8: {'center': [-29.9621, -36.1569, 90.22], 'normal': [0, 0, 1]}}
>>> print(z_planes)
{0: {'center': [-29.9621, -36.1569, 62.22], 'normal': [0, 0, 1]}, 1: {'center': [-29.9621, -36.1569, 65.72], 'normal': [0, 0, 1]}, 2: {'center': [-29.9621, -36.1569, 69.22], 'normal': [0, 0, 1]}, 3: {'center': [-29.9621, -36.1569, 72.72], 'normal': [0, 0, 1]}, 4: {'center': [-29.9621, -36.1569, 76.22], 'normal': [0, 0, 1]}, 5: {'center': [-29.9621, -36.1569, 79.72], 'normal': [0, 0, 1]}, 6: {'center': [-29.9621, -36.1569, 83.22], 'normal': [0, 0, 1]}, 7: {'center': [-29.9621, -36.1569, 86.72], 'normal': [0, 0, 1]}, 8: {'center': [-29.9621, -36.1569, 90.22], 'normal': [0, 0, 1]}}
>>> min_z
58.72
>>> max_z
94.0
>>> spacing_z
3.5
>>> len(z_planes)
9
>>> list(range(z_planes))
Traceback (most recent call last):
  File "<pyshell#127>", line 1, in <module>
    list(range(z_planes))
TypeError: 'dict' object cannot be interpreted as an integer
>>> list(range(len(z_planes)))
[0, 1, 2, 3, 4, 5, 6, 7, 8]
>>> len(pts)
15
>>> for n in range(len(z_planes)):
       for m in range(len(pts)):
	       zp = z_planes[n].get('center')
	       if pts[m][2] > zp and pts
KeyboardInterrupt
>>> 
>>> pts
[[-22.31, -46.94, 94.0], [-32.22, -46.54, 92.1], [-41.65, -42.97, 87.38], [-46.08, -38.57, 83.18], [-45.93, -35.38, 75.76], [-46.55, -35.92, 68.8], [-44.12, -40.42, 61.95], [-36.31, -44.23, 58.72], [-26.31, -44.84, 60.14], [-16.61, -46.71, 64.92], [-11.09, -48.23, 70.07], [-8.86, -46.85, 76.1], [-10.93, -44.75, 82.4], [-13.85, -45.99, 88.07], [-17.94, -46.54, 92.42]]
>>> class Line:
	def __init__(self, p1, p2):
		self.p1 = p1
		self.p2 = p2

		
>>> class Line:
	def __init__(self, p1, p2):
		self.p1 = p1
		self.p2 = p2
	def p1(self):
		return self.p1
	def p2(self):
		return p2

	
>>> l = Line([0,1,2], [2,3,4])
>>> l.p1
[0, 1, 2]
>>> l.p2
[2, 3, 4]
>>> from itertools import tee, zip_longest, islice
>>> def looped_pairwise(iterable):
    a, b = tee(iterable)
    return zip_longest(a, b, fillvalue=next(b, None))

>>> spline_lines = [Line(p1 = a, p2 = b) for a, b in looped_pairwise(pts)]
>>> len(spline_lines)
15
>>> 
